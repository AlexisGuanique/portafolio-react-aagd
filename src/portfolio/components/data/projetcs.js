export const projets = [
    {
        'id': 'js-gifapp',
        'lenguaje': 'javascript',
        'name': 'Gif App',
        'description': 'Se desarrolló una aplicación web que realiza consultas al API de GIPHY, de esta manera otorga una lista de 10 gif’s, dicha aplicación fue realizada 100% en el lenguaje Javascript y su librería React, cabe destacar que en dicha aplicación se aplicó el custom hook useFectGifs.js, el cual se encarga de realizar la tarea asíncrona de consultar a la API de GIPHY y traer nuestra respuesta en forma de objeto. También cabe destacar que dicha aplicación se encuentra testeada en su totalidad con la herramienta enzyme, de esta manera cuenta con todos sus test unitarios.',
        'stack': ['Javascript', 'React', 'JSX', 'CSS'],
        'link': 'https://alexisguanique.github.io/React-Gif-Galery-App/',
    },
    {
        'id': 'js-herolist',
        'lenguaje': 'javascript',
        'name': 'Hero List',
        'description': 'Se desarrolló una aplicación web la cual se encuentra construida 100% con Javascript y su librería React; dicha aplicación cuenta con la implementación de React Router Dom, con el objetivo de manejar las rutas de dicha aplicación. Cabe destacar que en esta aplicación además de crear y aplicar distintos custom hooks, también se utiliza el hook use Reducer, con el objetivo de manejar el estado global de la aplicación, también se utiliza el createContext de React para poder proporcionar información de manera globalizada a todos los componentes que componen la aplicación. Para darle estilos se utilizaron los estilos de Bootstrap. También cabe destacar que dicha aplicación se encuentra testeada en su totalidad con la herramienta enzyme, de esta manera cuenta con todos sus test unitarios.',
        'stack': ['Javascript', 'React', 'React Router Dom', 'HTML', 'CSS', 'MUI Material', 'Animated Style'],
        'link': 'https://github.com/AlexisGuanique/hero-app',
    },
    {
        'id': 'js-journal',
        'lenguaje': 'javascript',
        'name': 'Journald App',
        'description': 'Se desarrolló una aplicación web que está realizada 100% en el lenguaje Javascript y su librería React, en la misma implementamos la librería Redux, con el objetivo de manejar el estado global de una manera más eficiente debido al tamaño de la aplicación, las bases de datos utilizadas en dicha aplicación son bases de datos no relacionales de nombre Firebase y el backend fue implementado por el servicio Claudinary. Los estilos fueron implementados gracias a la libreria Material UI de React. También cabe destacar que dicha aplicación se encuentra testeada en su totalidad con la herramienta enzyme, de esta manera cuenta con todos sus test unitarios.',
        'stack': ['Javascript', 'React', 'React Router Dom', 'Redux', 'Claudinary', 'Firebase', 'HTML', 'CSS', 'MUI Material', 'Animated Style'],
        'link': 'https://github.com/AlexisGuanique/journald-app',
    },
    {
        'id': 'js-calendar',
        'lenguaje': 'javascript',
        'name': 'Calendar App',
        'description': 'Aqui va la descripcion del proyecto',
        'stack': ['Javascript', 'React', 'Node.js', 'Express', 'MongoDB'],
        'link': 'https://alexisguanique.github.io/React-Gif-Galery-App/',
    },

    {
        'id': 'python-portfolio',
        'lenguaje': 'python',
        'name': 'Portfolio App',
        'description': 'El desarrollo de este proyecto consistió básicamente en realizar un portafolios, en el cual poder mostrar parte de mis trabajos y además crear una ruta de contacto, por el cual se puedan comunicar con mi persona. El desarrollo del proyecto fue realizado con el lenguaje Python y su framework Flask, además utilice la API de Sendgrid, para realizar el envío de mails. De manera interna este proyecto posee un blueprint que se encarga de enviar el mail, recibiendo la información con protocolos HTTP, más específicamente, por el método de POST, todo esto a través de un formulario. Las plantillas fueron creadas con HTML y customizadas con CSS, cabe destacar que dicho portafolio cuenta con su respectivo diseño responsivo. Por último, dicho portafolio fue subido a la nube con la herramienta heroku.',
        'stack': ['Python', 'Api de Sendgrid', 'Flask', 'HTML', 'CSS'],
        'link': 'https://young-shelf-20130.herokuapp.com/',
    },
    {
        'id': 'python-mailer',
        'lenguaje': 'python',
        'name': 'Mailer App',
        'description': 'Es una aplicación capaz de permitir al usuario crear una cuenta personal y poder enviar correos electrónicos. Para construir dicha aplicación utilice el lenguaje Python y su framework Flask. Con el objeto blueprint de Flask se crearon dos módulos, uno para la autenticación y otro para realizar la creación del registro en la base de datos y el envío del correo electrónico. La conexión a la base de datos se realizó con el lenguaje SQL y el objeto mysql.connector, el envío de los correos electrónicos se logró gracias a la API de Sendgrid, las plantillas se realizaron con HTML y son renderizadas gracias al objeto render_template de Flask, a dichas plantillas se le dieron estilos con CSS y por último se subieron a la nube utilizando la herramienta heroku.',
        'stack': ['Python', 'Flask', 'MySql', 'SQL', 'HTML', 'CSS', 'Api de Sendgrid'],
        'link': 'https://warm-dawn-03628.herokuapp.com/',
    },
    {
        'id': 'python-todolist',
        'lenguaje': 'python',
        'name': 'To-do List App',
        'description': 'Es una aplicación web capaz de almacenar una lista de tareas de manera ordenada, con la finalidad de otorgarle al cliente una agenda virtual. Para la construcción de dicha aplicación se empleó el lenguaje de programación Python y su framework Flask, de esta manera se crearon dos blueprints, uno de autenticación y otro para crear los registros. La conexión a la base de datos se realizó con lenguaje SQL y el controlador mysql.conecctor, de esta manera creamos el acceso a las bases de datos en MySql; para crear las vistas utilizo HTML, y con el objeto render_template() de Flask, renderizamos las plantillas; Cabe destacar que los datos recibidos desde el explorador son recibidos a través de protocolos HTTP, en su mayoría por el método POST y GET. Por último se le dio estilos s las plantillas con CSS, para seguidamente subirlas a la nube, utilizando la herramienta heroku.',
        'stack': ['Python', 'Flask', 'MySql', 'SQL', 'HTML', 'CSS', 'Heroku'],
        'link': 'https://salty-oasis-13650.herokuapp.com/auth/login',
    },
    {
        'id': 'python-backendchallenge',
        'lenguaje': 'python',
        'name': 'Backend Challenge',
        'description': 'Se desarrolló una aplicación automatizada de cobros, la cual utiliza MongoDb como sistema de gestión de base de datos, en el cual se almacenan tres colecciones: Socios, Descuentos, Planes y una cuarta llamada Pagos, la cual es generada al momento de generar el cobro. El cobro realizado a los socios de la tabla Socios tiene la condición de que su estado sea activo y su fecha de expiración sea menor o igual a la fecha del día en el cual se realiza la prueba; además se debe buscar los descuentos que tenga disponibles el cliente y una vez realizado el cobro realiza una actualización en la base de datos de: la fecha de expiración (es aumentada un mes), la cantidad de aplicaciones que tiene disponible cada descuento (se resta 1) y es creado un registro en la colección Pagos. Es importante destacar que para realizar el cobro de manera automática, se utilizó la librería SCHEDULE, la cual permite agendar cada cuanto tiempo se realizará la ejecución del programa.',
        'stack': ['Python', 'MongoDB', 'UnitTest'],
        'link': 'https://github.com/AlexisGuanique/Challenge-Backend-y-Unit-Test',
    },

]